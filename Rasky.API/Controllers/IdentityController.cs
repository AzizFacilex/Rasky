using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Localization.Routing;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Localization;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using My.Extensions.Localization;
using Newtonsoft.Json;
using Rasky.API.IdentityDb;
using Rasky.API.IdentityDb.Helpers;
using Rasky.API.IdentityDb.Helpers.Models;
using Rasky.API.Responses;
using Rasky.API.Services;
using Rasky.API.ViewModels;
using Rasky.API.ViewModels.Helpers;
namespace Rasky.API.Controllers {
    [Route ("api/users")]
    [ApiController]

    public class IdentityController : ControllerBase {

        private readonly IEmailSender emailSender;
        private readonly ISmsSender smsSender;
        private readonly IProfileService profileService;
        private readonly IAuthService authService;
        /// <summary>
        /// Identity controller used for any identity related operations 
        /// Registration, login, reset password, confirmation email, phone confirmation etc..
        /// </summary>
        /// <param name="emailSender">Service for sending emails</param>
        /// <param name="smsSender">Service for sending Smss</param>
        /// <param name="authService">Service for the authentication and registration</param>
        public IdentityController (
            IEmailSender emailSender,
            ISmsSender smsSender,
            IAuthService authService, 
            IProfileService profileService) {
            this.authService = authService;
            this.emailSender = emailSender;
            this.smsSender = smsSender;
            this.profileService=profileService;
        }
        /// <summary>
        /// POST for user Login 
        /// </summary>
        /// <param name="model">Model holding username and password</param>
        /// <returns>oject containing jwt token if authenticated, otherwise an object that doesn't contain any jwt</returns>

        [HttpPost ("authenticate")]
        public async Task<IActionResult> Authenticate ([FromBody] CredentialsViewModel model) {

            if (!ModelState.IsValid) {

                return BadRequest (ModelState);
            }
            var identity = await this.authService.Login(model);
            identity.Jwt=new JsonObject(identity.Jwt).ToString();
            return new OkObjectResult (identity);
        }
        /// <summary>
        /// GET checks if email is not taken for user registration
        /// </summary>
        /// <param name="model">Email</param>
        /// <returns>object(Null) if email exists, otherwise an object </returns>
        [HttpGet ("checkEmail")]
        public async Task<IActionResult> CheckEmail (string model) {
            if (!ModelState.IsValid) {
                return new BadRequestObjectResult (ModelState);
            }
            
            return new OkObjectResult (await this.authService.IsEmailTaken(model));
        }
        /// <summary>
        /// POST Endpoint for new user registrations
        /// </summary>
        /// <param name="model">Holds user informations</param>
        /// <returns>view model holding if there are any</returns>
        [HttpPost ("register")]
        public async Task<RegisterViewModel> register ([FromBody] RegisterViewModel model) {
            if (!ModelState.IsValid) {
                var errors = ModelState.Select (x => x.Value.Errors)
                    .Where (y => y.Count > 0)
                    .ToList ();
                var temp = errors.SelectMany (x => x).ToList ();
                model.AddErrors (temp.Select (x => new Message (x.ErrorMessage)).ToList ());
                return model;
            }
            var result = await this.authService.Register (model);
            if (result.Errors.Count == 0) {
                await this.profileService.CreateProfile (model.emailGroup.FirstOrDefault ().Value);
                var callbackUrl = await this.authService.GetConfirmationUrl (model, Url.Link ("ConfirmEmailRoute", ""));
                await this.emailSender.SendConfirmationEmailAsync (model.emailGroup.FirstOrDefault ().Value, "Please confirm your email", callbackUrl);
            }
            return result;
        }
        /// <summary>
        /// GET Endpoint for confirming Email Address
        /// </summary>
        /// <param name="userId">User's id</param>
        /// <param name="code">Token generated by Identity provider</param>
        /// <returns>Object holding the confirmation result</returns>
        [HttpGet]
        [Route ("ConfirmEmail", Name = "ConfirmEmailRoute")]
        public async Task<IActionResult> ConfirmEmail (string userId = "", string code = "") {
            if (string.IsNullOrWhiteSpace (userId) || string.IsNullOrWhiteSpace (code)) {
                ModelState.AddModelError ("", "User Id and Code are required");
                return new BadRequestObjectResult (ModelState);
            }
            return new OkObjectResult(await this.authService.ConfirmEmail(userId,code));
        }
        /// <summary>
        /// GET Endpoint to initialize the reset password process
        /// </summary>
        /// <param name="model">Email</param>
        /// <returns></returns>
        [HttpGet]
        [AllowAnonymous]
        [Route ("ForgotPassword", Name = "ForgotPasswordRoute")]
        public async Task<IActionResult> ForgotPassword (string model) {
            // if (!ModelState.IsValid) {
            //     return new BadRequestObjectResult (ModelState);
            // }
            // var user = await userManager.FindByEmailAsync (model);

            // if (user == null) {
            //     return Ok ();
            // }

            // string code = await userManager.GeneratePasswordResetTokenAsync (user);
            // var callbackUrl = new Uri (Url.Link ("ForgotPasswordRoute", new { userId = user.Id, code = code }));

            // await this.emailSender.SendForgotPasswordEmailAsync (user.Email, "Reset your password", callbackUrl.AbsoluteUri);
            // return Ok ();
            return null;

            // If we got this far, something failed, redisplay form
        }
        /// <summary>
        /// GET Endpoint to initiate confirm phone number
        /// </summary>
        /// <param name="email">User's email</param>
        /// <param name="number">User's Phone number</param>
        /// <returns></returns>

        [Route ("ConfirmPhone", Name = "ConfirmPhoneRoute")]

        [HttpGet]
        public async Task<IActionResult> RequestSmsConfirmationCode (string email, string number) {
            // var userIdentity = await this.userManager.FindByEmailAsync (email);
            // userIdentity.PhoneNumber = number;
            // await this.userManager.UpdateAsync (userIdentity);
            // if (userIdentity != null) {
            //     await this.smsSender.SendConfirmationSmsCodeAsync (number);
            // } else {
            //     return new BadRequestObjectResult (new { Error = $"user {email} not found." });
            // }
            // return new OkObjectResult (new { Message = "Verification code sent successfully." });
            return null;
        }
        /// <summary>
        /// POST Endpoint to confirm Phone Number
        /// </summary>
        /// <param name="email">Email</param>
        /// <param name="code">Code Generated by SMS Provider</param>
        /// <returns></returns>
        [Route ("ConfirmPhone", Name = "ConfirmPhoneRoute")]

        [HttpPost]
        public async Task<IActionResult> VerifySmsConfirmationCode (string email, string code) {
            // var userIdentity = await this.userManager.FindByEmailAsync (email);
            // var number = userIdentity.PhoneNumber;
            // if (userIdentity != null) {
            //     await this.smsSender.VerifyConfirmationSmsCodeAsync (number, code);
            // } else {
            //     return new BadRequestObjectResult (new { Error = $"user {email} not found." });
            // }
            return new OkObjectResult (new { Message = "Verification code validated successfully." });
        }
    }
}