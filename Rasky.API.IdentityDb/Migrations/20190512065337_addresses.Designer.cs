// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rasky.API.IdentityDb;

namespace Rasky.API.IdentityDb.Migrations
{
    [DbContext(typeof(AppUserDbContext))]
    [Migration("20190512065337_addresses")]
    partial class addresses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.Address", b =>
                {
                    b.Property<float>("Longitude");

                    b.Property<float>("Latitude");

                    b.Property<string>("Country");

                    b.Property<string>("CountryCode");

                    b.Property<string>("ExactAddress");

                    b.Property<string>("Governorate");

                    b.Property<string>("Municipality");

                    b.Property<string>("StreetName");

                    b.HasKey("Longitude", "Latitude");

                    b.HasAlternateKey("Latitude", "Longitude");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdNumber");

                    b.Property<bool>("IdNumberVerified");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("RegistedOn");

                    b.Property<string>("RideId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("RideId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.Ride", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Departure");

                    b.Property<string>("DriverId");

                    b.Property<int>("FreeSeats");

                    b.Property<float?>("FromAddressLatitude");

                    b.Property<float?>("FromAddressLongitude");

                    b.Property<float>("PriceForSeat");

                    b.Property<float?>("ToAddressLatitude");

                    b.Property<float?>("ToAddressLongitude");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("FromAddressLongitude", "FromAddressLatitude");

                    b.HasIndex("ToAddressLongitude", "ToAddressLatitude");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Experience");

                    b.Property<string>("Image");

                    b.Property<bool>("PrefDiscussion");

                    b.Property<bool>("PrefMusic");

                    b.Property<bool>("PrefPet");

                    b.Property<bool>("PrefSmoke");

                    b.Property<string>("Rating");

                    b.Property<int>("Rides");

                    b.Property<string>("Summary");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Rasky.API.IdentityDb.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Rasky.API.IdentityDb.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rasky.API.IdentityDb.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Rasky.API.IdentityDb.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.AppUser", b =>
                {
                    b.HasOne("Rasky.API.IdentityDb.Ride")
                        .WithMany("Passengers")
                        .HasForeignKey("RideId");
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.Ride", b =>
                {
                    b.HasOne("Rasky.API.IdentityDb.AppUser", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("Rasky.API.IdentityDb.Address", "FromAddress")
                        .WithMany()
                        .HasForeignKey("FromAddressLongitude", "FromAddressLatitude");

                    b.HasOne("Rasky.API.IdentityDb.Address", "ToAddress")
                        .WithMany()
                        .HasForeignKey("ToAddressLongitude", "ToAddressLatitude");
                });

            modelBuilder.Entity("Rasky.API.IdentityDb.UserProfile", b =>
                {
                    b.HasOne("Rasky.API.IdentityDb.AppUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Rasky.API.IdentityDb.UserProfile", "UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
